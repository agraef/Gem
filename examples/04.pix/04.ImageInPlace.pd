#N canvas 286 42 602 599 12;
#X msg 470 229 1;
#X msg 470 261 0;
#X obj 36 301 gemwin;
#X msg 46 112 create;
#X obj 318 250 gemhead;
#X msg 52 143 destroy;
#X msg 54 220 1;
#X msg 54 252 0;
#X text 93 224 turn rendering on and off;
#X text 26 89 create and destroy the graphics window;
#X msg 469 192 2;
#X text 254 156 select one of the three images to display;
#X obj 318 304 pix_imageInPlace;
#X msg 167 253 preload temp*.jpg 2;
#X msg 157 286 download;
#X msg 158 318 purge;
#X obj 318 363 square;
#X text 206 20 display images use pix_imageInPlace;
#X text 64 389 pix_imageInPlace is slightly different than pix_multiimage.
When you select an image to display with pix_multiimage \, it copies
over the image data to the pix_buffer \, which is then used by pix_texture.
;
#X text 62 451 This is potentially slow if you are trying to change
between a lot of images \, but it doesn't use a lot of texture ram.
;
#X text 62 503 pix_imageInPlace sends all of the image data to texture
RAM when the preload message is received. This means that you cannot
process any of the pixel data \, but it is extremely quick to change
between the various images.;
#X connect 0 0 12 1;
#X connect 1 0 12 1;
#X connect 3 0 2 0;
#X connect 4 0 12 0;
#X connect 5 0 2 0;
#X connect 6 0 2 0;
#X connect 7 0 2 0;
#X connect 10 0 12 1;
#X connect 12 0 16 0;
#X connect 13 0 12 0;
#X connect 14 0 12 0;
#X connect 15 0 12 0;
