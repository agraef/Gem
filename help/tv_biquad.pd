#N canvas 38 0 580 577 10;
#X msg 152 126 gemList;
#X msg 152 270 gemList;
#X text 169 16 part of GEM;
#X obj 152 185 tv_biquad;
#X text 176 43 [tv_biquad];
#X text 56 329 [tv_biquad] operates on a sequence of images.;
#X text 53 359 basically it works like the pd-object [biquad~] (except
\, that applies to images instead of samples);
#X text 69 427 y(n) = ff1 * w(n) + ff2 * w(n-1) + ff3 * w(n-2);
#X text 70 442 w(n) = fb0 * x(n) + fb1 * w(n-1) + fb2 * w(n-2);
#X text 65 399 the operation can be described by the following difference-equation:
;
#X msg 258 145 set;
#X text 48 479 x(n) describes the input-image \, y(n) is the output-image.
;
#X text 46 501 You can set all buffer-images w(m) to the next input-image
x(n) with the "set"-command.;
#X msg 256 121 fb0 fb1 fb2 ff1 ff2 ff3;
#X msg 263 204 1 0 0 1 0 0;
#X text 352 204 route through;
#X text 96 88 apply a recursive time-filter on a series of images;
#X msg 264 226 0.1 0.5 0.1 0.2 0.2 0.6;
#X msg 266 252 1 -1 0 1 0 0;
#X text 436 226 a low pass (IIR);
#X text 438 252 a high pass (FIR);
#X text 139 149 x(n);
#X text 142 247 y(n);
#X obj 209 548 biquad~;
#X text 135 548 see also:;
#X connect 0 0 3 0;
#X connect 3 0 1 0;
#X connect 10 0 3 0;
#X connect 13 0 3 0;
#X connect 14 0 3 0;
#X connect 17 0 3 0;
#X connect 18 0 3 0;
